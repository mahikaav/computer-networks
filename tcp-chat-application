// Server side:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>
#include <time.h>

#define PORT 8000
#define BUF_SIZE 1024

int main(int argc, char **argv) {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buf[BUF_SIZE];
    int bytes_received;
    int yes = 1;
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("socket failed");
        exit(1);
    }

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
        perror("setsockopt");
        exit(1);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind failed");
        exit(1);
    }
    if (listen(server_fd, 5) < 0) {
        perror("listen failed");
        exit(1);
    }
    printf("Server started at port %d, ready to accept connections...\n", PORT);

    while (1) {
        client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_len);
        if (client_fd < 0) {
            perror("accept failed");
            continue;
        }
        printf("Client connected: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

        while (1) {
            bytes_received = recv(client_fd, buf, BUF_SIZE, 0);
            if (bytes_received < 0) {
                perror("recv failed");
                break;
            } else if (bytes_received == 0) {
                time_t current_time;
                time(&current_time);
                struct tm *local_time = localtime(&current_time);
                printf("Client disconnected: %s:%d at %s", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), asctime(local_time));
                close(client_fd);
                break;
            } else {
                buf[bytes_received] = '\0';
                time_t current_time;
                time(&current_time);
                struct tm *local_time = localtime(&current_time);
                printf("Received message from %s:%d at %s: %s", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), asctime(local_time), buf);
                send(client_fd, buf, bytes_received, 0);
            }
        }
    }

    return 0;
}

// Client side
#include <stdio.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>

#define PORT 8000
#define BUF_SIZE 1024

int main() {
    int client_fd;
    struct sockaddr_in server_addr;
    char buf[BUF_SIZE];
    int bytes_received;
    client_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (client_fd == -1) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        exit(EXIT_FAILURE);
    }
    if (connect(client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("connection failed");
        exit(EXIT_FAILURE);
    }

    printf("Connected to server at %s:%d\n", "127.0.0.1", PORT);
    printf("Type 'quit' to exit the chat application.\n");
    while (1) {
        printf("Enter message: ");
        fgets(buf, BUF_SIZE, stdin);
        buf[strcspn(buf, "\n")] = '\0';
        if (send(client_fd, buf, strlen(buf), 0) == -1) {
            perror("send failed");
            exit(EXIT_FAILURE);
        }
        if (strcmp(buf, "quit") == 0) {
            close(client_fd);
            exit(EXIT_SUCCESS);
        }
        bytes_received = recv(client_fd, buf, BUF_SIZE - 1, 0);
        if (bytes_received == -1) {
            perror("recv failed");
            exit(EXIT_FAILURE);
        } else if (bytes_received == 0) {
            printf("Server disconnected.\n");
            close(client_fd);
            exit(EXIT_SUCCESS);
        } else {
            buf[bytes_received] = '\0';
            printf("Server sent: %s\n", buf);
        }
    }
    return 0;
}

